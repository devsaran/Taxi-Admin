"use strict";
(self["webpackChunkapp"] = self["webpackChunkapp"] || []).push([["node_modules_codetrix-studio_capacitor-google-auth_dist_esm_web_js"],{

/***/ 4707:
/*!*****************************************************************************!*\
  !*** ./node_modules/@codetrix-studio/capacitor-google-auth/dist/esm/web.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "GoogleAuthWeb": () => (/* binding */ GoogleAuthWeb)
/* harmony export */ });
/* harmony import */ var _Users_chineduetoh_Desktop_IONIC_PROJECTS_myAdmin_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js */ 1670);
/* harmony import */ var _capacitor_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @capacitor/core */ 6549);


class GoogleAuthWeb extends _capacitor_core__WEBPACK_IMPORTED_MODULE_1__.WebPlugin {
  constructor() {
    super();
  }

  loadScript() {
    if (typeof document === 'undefined') {
      return;
    }

    const scriptId = 'gapi';
    const scriptEl = document === null || document === void 0 ? void 0 : document.getElementById(scriptId);

    if (scriptEl) {
      return;
    }

    const head = document.getElementsByTagName('head')[0];
    const script = document.createElement('script');
    script.type = 'text/javascript';
    script.defer = true;
    script.async = true;
    script.id = scriptId;
    script.onload = this.platformJsLoaded.bind(this);
    script.src = 'https://apis.google.com/js/platform.js';
    head.appendChild(script);
  }

  initialize(_options = {
    clientId: '',
    scopes: [],
    grantOfflineAccess: false
  }) {
    var _a, _b;

    if (typeof window === 'undefined') {
      return;
    }

    const metaClientId = (_a = document.getElementsByName('google-signin-client_id')[0]) === null || _a === void 0 ? void 0 : _a.content;
    const clientId = _options.clientId || metaClientId || '';

    if (!clientId) {
      console.warn('GoogleAuthPlugin - clientId is empty');
    }

    this.options = {
      clientId,
      grantOfflineAccess: (_b = _options.grantOfflineAccess) !== null && _b !== void 0 ? _b : false,
      scopes: _options.scopes || []
    };
    this.gapiLoaded = new Promise(resolve => {
      // HACK: Relying on window object, can't get property in gapi.load callback
      window.gapiResolve = resolve;
      this.loadScript();
    });
    this.addUserChangeListener();
  }

  platformJsLoaded() {
    gapi.load('auth2', () => {
      // https://github.com/CodetrixStudio/CapacitorGoogleAuth/issues/202#issuecomment-1147393785
      const clientConfig = {
        client_id: this.options.clientId,
        plugin_name: 'CodetrixStudioCapacitorGoogleAuth'
      };

      if (this.options.scopes.length) {
        clientConfig.scope = this.options.scopes.join(' ');
      }

      gapi.auth2.init(clientConfig);
      window.gapiResolve();
    });
  }

  signIn() {
    var _this = this;

    return (0,_Users_chineduetoh_Desktop_IONIC_PROJECTS_myAdmin_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      return new Promise( /*#__PURE__*/function () {
        var _ref = (0,_Users_chineduetoh_Desktop_IONIC_PROJECTS_myAdmin_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* (resolve, reject) {
          var _a;

          try {
            let serverAuthCode;
            const needsOfflineAccess = (_a = _this.options.grantOfflineAccess) !== null && _a !== void 0 ? _a : false;

            if (needsOfflineAccess) {
              const offlineAccessResponse = yield gapi.auth2.getAuthInstance().grantOfflineAccess();
              serverAuthCode = offlineAccessResponse.code;
            } else {
              yield gapi.auth2.getAuthInstance().signIn();
            }

            const googleUser = gapi.auth2.getAuthInstance().currentUser.get();

            if (needsOfflineAccess) {
              // HACK: AuthResponse is null if we don't do this when using grantOfflineAccess
              yield googleUser.reloadAuthResponse();
            }

            const user = _this.getUserFrom(googleUser);

            user.serverAuthCode = serverAuthCode;
            resolve(user);
          } catch (error) {
            reject(error);
          }
        });

        return function (_x, _x2) {
          return _ref.apply(this, arguments);
        };
      }());
    })();
  }

  refresh() {
    return (0,_Users_chineduetoh_Desktop_IONIC_PROJECTS_myAdmin_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      const authResponse = yield gapi.auth2.getAuthInstance().currentUser.get().reloadAuthResponse();
      return {
        accessToken: authResponse.access_token,
        idToken: authResponse.id_token,
        refreshToken: ''
      };
    })();
  }

  signOut() {
    return (0,_Users_chineduetoh_Desktop_IONIC_PROJECTS_myAdmin_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      return gapi.auth2.getAuthInstance().signOut();
    })();
  }

  addUserChangeListener() {
    var _this2 = this;

    return (0,_Users_chineduetoh_Desktop_IONIC_PROJECTS_myAdmin_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      yield _this2.gapiLoaded;
      gapi.auth2.getAuthInstance().currentUser.listen(googleUser => {
        _this2.notifyListeners('userChange', googleUser.isSignedIn() ? _this2.getUserFrom(googleUser) : null);
      });
    })();
  }

  getUserFrom(googleUser) {
    const user = {};
    const profile = googleUser.getBasicProfile();
    user.email = profile.getEmail();
    user.familyName = profile.getFamilyName();
    user.givenName = profile.getGivenName();
    user.id = profile.getId();
    user.imageUrl = profile.getImageUrl();
    user.name = profile.getName();
    const authResponse = googleUser.getAuthResponse(true);
    user.authentication = {
      accessToken: authResponse.access_token,
      idToken: authResponse.id_token,
      refreshToken: ''
    };
    return user;
  }

}

/***/ })

}]);
//# sourceMappingURL=node_modules_codetrix-studio_capacitor-google-auth_dist_esm_web_js.js.map