"use strict";
(self["webpackChunkapp"] = self["webpackChunkapp"] || []).push([["node_modules_capacitor_google-maps_dist_esm_web_js"],{

/***/ 601:
/*!*************************************************************!*\
  !*** ./node_modules/@capacitor/google-maps/dist/esm/web.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "CapacitorGoogleMapsWeb": () => (/* binding */ CapacitorGoogleMapsWeb)
/* harmony export */ });
/* harmony import */ var _Users_chineduetoh_Desktop_IONIC_PROJECTS_myAdmin_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js */ 1670);
/* harmony import */ var _capacitor_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @capacitor/core */ 6549);
/* harmony import */ var _googlemaps_markerclusterer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @googlemaps/markerclusterer */ 2755);



class CapacitorGoogleMapsWeb extends _capacitor_core__WEBPACK_IMPORTED_MODULE_1__.WebPlugin {
  constructor() {
    super(...arguments);
    this.gMapsRef = undefined;
    this.maps = {};
    this.currMarkerId = 0;

    this.onClusterClickHandler = (_, cluster, map) => {
      var _a, _b;

      const mapId = this.getIdFromMap(map);
      const items = [];

      if (cluster.markers != undefined) {
        for (const marker of cluster.markers) {
          const markerId = this.getIdFromMarker(mapId, marker);
          items.push({
            markerId: markerId,
            latitude: (_a = marker.getPosition()) === null || _a === void 0 ? void 0 : _a.lat(),
            longitude: (_b = marker.getPosition()) === null || _b === void 0 ? void 0 : _b.lng(),
            title: marker.getTitle(),
            snippet: ''
          });
        }
      }

      this.notifyListeners('onClusterClick', {
        mapId: mapId,
        latitude: cluster.position.lat(),
        longitude: cluster.position.lng(),
        size: cluster.count,
        items: items
      });
    };
  }

  getIdFromMap(map) {
    for (const id in this.maps) {
      if (this.maps[id].map == map) {
        return id;
      }
    }

    return '';
  }

  getIdFromMarker(mapId, marker) {
    for (const id in this.maps[mapId].markers) {
      if (this.maps[mapId].markers[id] == marker) {
        return id;
      }
    }

    return '';
  }

  importGoogleLib(apiKey) {
    var _this = this;

    return (0,_Users_chineduetoh_Desktop_IONIC_PROJECTS_myAdmin_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      if (_this.gMapsRef === undefined) {
        const lib = yield __webpack_require__.e(/*! import() */ "node_modules_googlemaps_js-api-loader_dist_index_esm_js").then(__webpack_require__.bind(__webpack_require__, /*! @googlemaps/js-api-loader */ 252));
        const loader = new lib.Loader({
          apiKey: apiKey !== null && apiKey !== void 0 ? apiKey : '',
          version: 'weekly',
          libraries: ['places']
        });
        const google = yield loader.load();
        _this.gMapsRef = google.maps;
        console.log('Loaded google maps API');
      }
    })();
  }

  setCamera(_args) {
    var _this2 = this;

    return (0,_Users_chineduetoh_Desktop_IONIC_PROJECTS_myAdmin_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      // Animation not supported yet...
      _this2.maps[_args.id].map.moveCamera({
        center: _args.config.coordinate,
        heading: _args.config.bearing,
        tilt: _args.config.angle,
        zoom: _args.config.zoom
      });
    })();
  }

  setMapType(_args) {
    var _this3 = this;

    return (0,_Users_chineduetoh_Desktop_IONIC_PROJECTS_myAdmin_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      _this3.maps[_args.id].map.setMapTypeId(_args.mapType);
    })();
  }

  enableIndoorMaps(_args) {
    return (0,_Users_chineduetoh_Desktop_IONIC_PROJECTS_myAdmin_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      throw new Error('Method not supported on web.');
    })();
  }

  enableTrafficLayer(_args) {
    var _this4 = this;

    return (0,_Users_chineduetoh_Desktop_IONIC_PROJECTS_myAdmin_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      var _a;

      const trafficLayer = (_a = _this4.maps[_args.id].trafficLayer) !== null && _a !== void 0 ? _a : new google.maps.TrafficLayer();

      if (_args.enabled) {
        trafficLayer.setMap(_this4.maps[_args.id].map);
        _this4.maps[_args.id].trafficLayer = trafficLayer;
      } else if (_this4.maps[_args.id].trafficLayer) {
        trafficLayer.setMap(null);
        _this4.maps[_args.id].trafficLayer = undefined;
      }
    })();
  }

  enableAccessibilityElements(_args) {
    return (0,_Users_chineduetoh_Desktop_IONIC_PROJECTS_myAdmin_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      throw new Error('Method not supported on web.');
    })();
  }

  dispatchMapEvent(_args) {
    throw new Error('Method not supported on web.');
  }

  enableCurrentLocation(_args) {
    var _this5 = this;

    return (0,_Users_chineduetoh_Desktop_IONIC_PROJECTS_myAdmin_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      if (_args.enabled) {
        if (navigator.geolocation) {
          navigator.geolocation.getCurrentPosition(position => {
            const pos = {
              lat: position.coords.latitude,
              lng: position.coords.longitude
            };

            _this5.maps[_args.id].map.setCenter(pos);

            _this5.notifyListeners('onMyLocationButtonClick', {});

            _this5.notifyListeners('onMyLocationClick', {});
          }, () => {
            throw new Error('Geolocation not supported on web browser.');
          });
        } else {
          throw new Error('Geolocation not supported on web browser.');
        }
      }
    })();
  }

  setPadding(_args) {
    var _this6 = this;

    return (0,_Users_chineduetoh_Desktop_IONIC_PROJECTS_myAdmin_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      const bounds = _this6.maps[_args.id].map.getBounds();

      if (bounds !== undefined) {
        _this6.maps[_args.id].map.fitBounds(bounds, _args.padding);
      }
    })();
  }

  getMapBounds(_args) {
    var _this7 = this;

    return (0,_Users_chineduetoh_Desktop_IONIC_PROJECTS_myAdmin_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      const bounds = _this7.maps[_args.id].map.getBounds();

      if (!bounds) {
        throw new Error('Google Map Bounds could not be found.');
      }

      return {
        southwest: {
          lat: bounds.getSouthWest().lat(),
          lng: bounds.getSouthWest().lng()
        },
        center: {
          lat: bounds.getCenter().lat(),
          lng: bounds.getCenter().lng()
        },
        northeast: {
          lat: bounds.getNorthEast().lat(),
          lng: bounds.getNorthEast().lng()
        }
      };
    })();
  }

  addMarkers(_args) {
    var _this8 = this;

    return (0,_Users_chineduetoh_Desktop_IONIC_PROJECTS_myAdmin_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      const markerIds = [];
      const map = _this8.maps[_args.id];

      for (const markerArgs of _args.markers) {
        const markerOpts = _this8.buildMarkerOpts(markerArgs, map.map);

        const marker = new google.maps.Marker(markerOpts);
        const id = '' + _this8.currMarkerId;
        map.markers[id] = marker;

        _this8.setMarkerListeners(_args.id, id, marker);

        markerIds.push(id);
        _this8.currMarkerId++;
      }

      return {
        ids: markerIds
      };
    })();
  }

  addMarker(_args) {
    var _this9 = this;

    return (0,_Users_chineduetoh_Desktop_IONIC_PROJECTS_myAdmin_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      const markerOpts = _this9.buildMarkerOpts(_args.marker, _this9.maps[_args.id].map);

      const marker = new google.maps.Marker(markerOpts);
      const id = '' + _this9.currMarkerId;
      _this9.maps[_args.id].markers[id] = marker;

      _this9.setMarkerListeners(_args.id, id, marker);

      _this9.currMarkerId++;
      return {
        id: id
      };
    })();
  }

  removeMarkers(_args) {
    var _this10 = this;

    return (0,_Users_chineduetoh_Desktop_IONIC_PROJECTS_myAdmin_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      const map = _this10.maps[_args.id];

      for (const id of _args.markerIds) {
        map.markers[id].setMap(null);
        delete map.markers[id];
      }
    })();
  }

  removeMarker(_args) {
    var _this11 = this;

    return (0,_Users_chineduetoh_Desktop_IONIC_PROJECTS_myAdmin_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      _this11.maps[_args.id].markers[_args.markerId].setMap(null);

      delete _this11.maps[_args.id].markers[_args.markerId];
    })();
  }

  enableClustering(_args) {
    var _this12 = this;

    return (0,_Users_chineduetoh_Desktop_IONIC_PROJECTS_myAdmin_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      const markers = [];

      for (const id in _this12.maps[_args.id].markers) {
        markers.push(_this12.maps[_args.id].markers[id]);
      }

      _this12.maps[_args.id].markerClusterer = new _googlemaps_markerclusterer__WEBPACK_IMPORTED_MODULE_2__.MarkerClusterer({
        map: _this12.maps[_args.id].map,
        markers: markers,
        onClusterClick: _this12.onClusterClickHandler
      });
    })();
  }

  disableClustering(_args) {
    var _this13 = this;

    return (0,_Users_chineduetoh_Desktop_IONIC_PROJECTS_myAdmin_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      var _a;

      (_a = _this13.maps[_args.id].markerClusterer) === null || _a === void 0 ? void 0 : _a.setMap(null);
      _this13.maps[_args.id].markerClusterer = undefined;
    })();
  }

  onScroll(_args) {
    return (0,_Users_chineduetoh_Desktop_IONIC_PROJECTS_myAdmin_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      throw new Error('Method not supported on web.');
    })();
  }

  create(_args) {
    var _this14 = this;

    return (0,_Users_chineduetoh_Desktop_IONIC_PROJECTS_myAdmin_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      console.log(`Create map: ${_args.id}`);
      yield _this14.importGoogleLib(_args.apiKey);
      _this14.maps[_args.id] = {
        map: new window.google.maps.Map(_args.element, Object.assign({}, _args.config)),
        element: _args.element,
        markers: {}
      };

      _this14.setMapListeners(_args.id);
    })();
  }

  destroy(_args) {
    var _this15 = this;

    return (0,_Users_chineduetoh_Desktop_IONIC_PROJECTS_myAdmin_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      console.log(`Destroy map: ${_args.id}`);
      const mapItem = _this15.maps[_args.id];
      mapItem.element.innerHTML = '';
      mapItem.map.unbindAll();
      delete _this15.maps[_args.id];
    })();
  }

  setMarkerListeners(mapId, markerId, marker) {
    var _this16 = this;

    return (0,_Users_chineduetoh_Desktop_IONIC_PROJECTS_myAdmin_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      marker.addListener('click', () => {
        var _a, _b;

        _this16.notifyListeners('onMarkerClick', {
          mapId: mapId,
          markerId: markerId,
          latitude: (_a = marker.getPosition()) === null || _a === void 0 ? void 0 : _a.lat(),
          longitude: (_b = marker.getPosition()) === null || _b === void 0 ? void 0 : _b.lng(),
          title: marker.getTitle(),
          snippet: ''
        });
      });
      marker.addListener('dragstart', () => {
        var _a, _b;

        _this16.notifyListeners('onMarkerDragStart', {
          mapId: mapId,
          markerId: markerId,
          latitude: (_a = marker.getPosition()) === null || _a === void 0 ? void 0 : _a.lat(),
          longitude: (_b = marker.getPosition()) === null || _b === void 0 ? void 0 : _b.lng(),
          title: marker.getTitle(),
          snippet: ''
        });
      });
      marker.addListener('drag', () => {
        var _a, _b;

        _this16.notifyListeners('onMarkerDrag', {
          mapId: mapId,
          markerId: markerId,
          latitude: (_a = marker.getPosition()) === null || _a === void 0 ? void 0 : _a.lat(),
          longitude: (_b = marker.getPosition()) === null || _b === void 0 ? void 0 : _b.lng(),
          title: marker.getTitle(),
          snippet: ''
        });
      });
      marker.addListener('dragend', () => {
        var _a, _b;

        _this16.notifyListeners('onMarkerDragEnd', {
          mapId: mapId,
          markerId: markerId,
          latitude: (_a = marker.getPosition()) === null || _a === void 0 ? void 0 : _a.lat(),
          longitude: (_b = marker.getPosition()) === null || _b === void 0 ? void 0 : _b.lng(),
          title: marker.getTitle(),
          snippet: ''
        });
      });
    })();
  }

  setMapListeners(mapId) {
    var _this17 = this;

    return (0,_Users_chineduetoh_Desktop_IONIC_PROJECTS_myAdmin_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      const map = _this17.maps[mapId].map;
      map.addListener('idle', /*#__PURE__*/(0,_Users_chineduetoh_Desktop_IONIC_PROJECTS_myAdmin_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
        var _a, _b;

        const bounds = yield _this17.getMapBounds({
          id: mapId
        });

        _this17.notifyListeners('onCameraIdle', {
          mapId: mapId,
          bearing: map.getHeading(),
          bounds: bounds,
          latitude: (_a = map.getCenter()) === null || _a === void 0 ? void 0 : _a.lat(),
          longitude: (_b = map.getCenter()) === null || _b === void 0 ? void 0 : _b.lng(),
          tilt: map.getTilt(),
          zoom: map.getZoom()
        });
      }));
      map.addListener('center_changed', () => {
        _this17.notifyListeners('onCameraMoveStarted', {
          mapId: mapId,
          isGesture: true
        });
      });
      map.addListener('bounds_changed', /*#__PURE__*/(0,_Users_chineduetoh_Desktop_IONIC_PROJECTS_myAdmin_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
        var _a, _b;

        const bounds = yield _this17.getMapBounds({
          id: mapId
        });

        _this17.notifyListeners('onBoundsChanged', {
          mapId: mapId,
          bearing: map.getHeading(),
          bounds: bounds,
          latitude: (_a = map.getCenter()) === null || _a === void 0 ? void 0 : _a.lat(),
          longitude: (_b = map.getCenter()) === null || _b === void 0 ? void 0 : _b.lng(),
          tilt: map.getTilt(),
          zoom: map.getZoom()
        });
      }));
      map.addListener('click', e => {
        var _a, _b;

        _this17.notifyListeners('onMapClick', {
          mapId: mapId,
          latitude: (_a = e.latLng) === null || _a === void 0 ? void 0 : _a.lat(),
          longitude: (_b = e.latLng) === null || _b === void 0 ? void 0 : _b.lng()
        });
      });

      _this17.notifyListeners('onMapReady', {
        mapId: mapId
      });
    })();
  }

  buildMarkerOpts(marker, map) {
    let iconImage = undefined;

    if (marker.iconUrl) {
      iconImage = {
        url: marker.iconUrl,
        scaledSize: marker.iconSize ? new google.maps.Size(marker.iconSize.width, marker.iconSize.height) : null,
        anchor: marker.iconAnchor ? new google.maps.Point(marker.iconAnchor.x, marker.iconAnchor.y) : new google.maps.Point(0, 0),
        origin: marker.iconOrigin ? new google.maps.Point(marker.iconOrigin.x, marker.iconOrigin.y) : new google.maps.Point(0, 0)
      };
    }

    const opts = {
      position: marker.coordinate,
      map: map,
      opacity: marker.opacity,
      title: marker.title,
      icon: iconImage,
      draggable: marker.draggable
    };
    return opts;
  }

}

/***/ }),

/***/ 2755:
/*!********************************************************************!*\
  !*** ./node_modules/@googlemaps/markerclusterer/dist/index.esm.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AbstractAlgorithm": () => (/* binding */ AbstractAlgorithm),
/* harmony export */   "AbstractViewportAlgorithm": () => (/* binding */ AbstractViewportAlgorithm),
/* harmony export */   "Cluster": () => (/* binding */ Cluster),
/* harmony export */   "ClusterStats": () => (/* binding */ ClusterStats),
/* harmony export */   "DefaultRenderer": () => (/* binding */ DefaultRenderer),
/* harmony export */   "GridAlgorithm": () => (/* binding */ GridAlgorithm),
/* harmony export */   "MarkerClusterer": () => (/* binding */ MarkerClusterer),
/* harmony export */   "MarkerClustererEvents": () => (/* binding */ MarkerClustererEvents),
/* harmony export */   "NoopAlgorithm": () => (/* binding */ NoopAlgorithm),
/* harmony export */   "SuperClusterAlgorithm": () => (/* binding */ SuperClusterAlgorithm),
/* harmony export */   "defaultOnClusterClickHandler": () => (/* binding */ defaultOnClusterClickHandler),
/* harmony export */   "distanceBetweenPoints": () => (/* binding */ distanceBetweenPoints),
/* harmony export */   "extendBoundsToPaddedViewport": () => (/* binding */ extendBoundsToPaddedViewport),
/* harmony export */   "extendPixelBounds": () => (/* binding */ extendPixelBounds),
/* harmony export */   "filterMarkersToPaddedViewport": () => (/* binding */ filterMarkersToPaddedViewport),
/* harmony export */   "noop": () => (/* binding */ noop),
/* harmony export */   "pixelBoundsToLatLngBounds": () => (/* binding */ pixelBoundsToLatLngBounds)
/* harmony export */ });
/* harmony import */ var fast_deep_equal__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! fast-deep-equal */ 8535);
/* harmony import */ var fast_deep_equal__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(fast_deep_equal__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var supercluster__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! supercluster */ 7970);


/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

function __rest(s, e) {
  var t = {};

  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];

  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
}
/**
 * Copyright 2021 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


class Cluster {
  constructor({
    markers,
    position
  }) {
    this.markers = markers;

    if (position) {
      if (position instanceof google.maps.LatLng) {
        this._position = position;
      } else {
        this._position = new google.maps.LatLng(position);
      }
    }
  }

  get bounds() {
    if (this.markers.length === 0 && !this._position) {
      return undefined;
    }

    return this.markers.reduce((bounds, marker) => {
      return bounds.extend(marker.getPosition());
    }, new google.maps.LatLngBounds(this._position, this._position));
  }

  get position() {
    return this._position || this.bounds.getCenter();
  }
  /**
   * Get the count of **visible** markers.
   */


  get count() {
    return this.markers.filter(m => m.getVisible()).length;
  }
  /**
   * Add a marker to the cluster.
   */


  push(marker) {
    this.markers.push(marker);
  }
  /**
   * Cleanup references and remove marker from map.
   */


  delete() {
    if (this.marker) {
      this.marker.setMap(null);
      delete this.marker;
    }

    this.markers.length = 0;
  }

}
/**
 * Copyright 2021 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


const filterMarkersToPaddedViewport = (map, mapCanvasProjection, markers, viewportPadding) => {
  const extendedMapBounds = extendBoundsToPaddedViewport(map.getBounds(), mapCanvasProjection, viewportPadding);
  return markers.filter(marker => extendedMapBounds.contains(marker.getPosition()));
};
/**
 * Extends a bounds by a number of pixels in each direction.
 */


const extendBoundsToPaddedViewport = (bounds, projection, pixels) => {
  const {
    northEast,
    southWest
  } = latLngBoundsToPixelBounds(bounds, projection);
  const extendedPixelBounds = extendPixelBounds({
    northEast,
    southWest
  }, pixels);
  return pixelBoundsToLatLngBounds(extendedPixelBounds, projection);
};
/**
 * @hidden
 */


const distanceBetweenPoints = (p1, p2) => {
  const R = 6371; // Radius of the Earth in km

  const dLat = (p2.lat - p1.lat) * Math.PI / 180;
  const dLon = (p2.lng - p1.lng) * Math.PI / 180;
  const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) + Math.cos(p1.lat * Math.PI / 180) * Math.cos(p2.lat * Math.PI / 180) * Math.sin(dLon / 2) * Math.sin(dLon / 2);
  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
  return R * c;
};
/**
 * @hidden
 */


const latLngBoundsToPixelBounds = (bounds, projection) => {
  return {
    northEast: projection.fromLatLngToDivPixel(bounds.getNorthEast()),
    southWest: projection.fromLatLngToDivPixel(bounds.getSouthWest())
  };
};
/**
 * @hidden
 */


const extendPixelBounds = ({
  northEast,
  southWest
}, pixels) => {
  northEast.x += pixels;
  northEast.y -= pixels;
  southWest.x -= pixels;
  southWest.y += pixels;
  return {
    northEast,
    southWest
  };
};
/**
 * @hidden
 */


const pixelBoundsToLatLngBounds = ({
  northEast,
  southWest
}, projection) => {
  const bounds = new google.maps.LatLngBounds();
  bounds.extend(projection.fromDivPixelToLatLng(northEast));
  bounds.extend(projection.fromDivPixelToLatLng(southWest));
  return bounds;
};
/**
 * Copyright 2021 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * @hidden
 */


class AbstractAlgorithm {
  constructor({
    maxZoom = 16
  }) {
    this.maxZoom = maxZoom;
  }
  /**
   * Helper function to bypass clustering based upon some map state such as
   * zoom, number of markers, etc.
   *
   * ```typescript
   *  cluster({markers, map}: AlgorithmInput): Cluster[] {
   *    if (shouldBypassClustering(map)) {
   *      return this.noop({markers, map})
   *    }
   * }
   * ```
   */


  noop({
    markers
  }) {
    return noop(markers);
  }

}
/**
 * Abstract viewport algorithm proves a class to filter markers by a padded
 * viewport. This is a common optimization.
 *
 * @hidden
 */


class AbstractViewportAlgorithm extends AbstractAlgorithm {
  constructor(_a) {
    var {
      viewportPadding = 60
    } = _a,
        options = __rest(_a, ["viewportPadding"]);

    super(options);
    this.viewportPadding = 60;
    this.viewportPadding = viewportPadding;
  }

  calculate({
    markers,
    map,
    mapCanvasProjection
  }) {
    if (map.getZoom() >= this.maxZoom) {
      return {
        clusters: this.noop({
          markers,
          map,
          mapCanvasProjection
        }),
        changed: false
      };
    }

    return {
      clusters: this.cluster({
        markers: filterMarkersToPaddedViewport(map, mapCanvasProjection, markers, this.viewportPadding),
        map,
        mapCanvasProjection
      })
    };
  }

}
/**
 * @hidden
 */


const noop = markers => {
  const clusters = markers.map(marker => new Cluster({
    position: marker.getPosition(),
    markers: [marker]
  }));
  return clusters;
};
/**
 * Copyright 2021 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * The default Grid algorithm historically used in Google Maps marker
 * clustering.
 *
 * The Grid algorithm does not implement caching and markers may flash as the
 * viewport changes. Instead use {@link SuperClusterAlgorithm}.
 */


class GridAlgorithm extends AbstractViewportAlgorithm {
  constructor(_a) {
    var {
      maxDistance = 40000,
      gridSize = 40
    } = _a,
        options = __rest(_a, ["maxDistance", "gridSize"]);

    super(options);
    this.clusters = [];
    this.maxDistance = maxDistance;
    this.gridSize = gridSize;
    this.state = {
      zoom: null
    };
  }

  calculate({
    markers,
    map,
    mapCanvasProjection
  }) {
    const state = {
      zoom: map.getZoom()
    };
    let changed = false;
    if (this.state.zoom > this.maxZoom && state.zoom > this.maxZoom) ;else {
      changed = !fast_deep_equal__WEBPACK_IMPORTED_MODULE_0___default()(this.state, state);
    }
    this.state = state;

    if (map.getZoom() >= this.maxZoom) {
      return {
        clusters: this.noop({
          markers,
          map,
          mapCanvasProjection
        }),
        changed: changed
      };
    }

    return {
      clusters: this.cluster({
        markers: filterMarkersToPaddedViewport(map, mapCanvasProjection, markers, this.viewportPadding),
        map,
        mapCanvasProjection
      })
    };
  }

  cluster({
    markers,
    map,
    mapCanvasProjection
  }) {
    this.clusters = [];
    markers.forEach(marker => {
      this.addToClosestCluster(marker, map, mapCanvasProjection);
    });
    return this.clusters;
  }

  addToClosestCluster(marker, map, projection) {
    let maxDistance = this.maxDistance; // Some large number

    let cluster = null;

    for (let i = 0; i < this.clusters.length; i++) {
      const candidate = this.clusters[i];
      const distance = distanceBetweenPoints(candidate.bounds.getCenter().toJSON(), marker.getPosition().toJSON());

      if (distance < maxDistance) {
        maxDistance = distance;
        cluster = candidate;
      }
    }

    if (cluster && extendBoundsToPaddedViewport(cluster.bounds, projection, this.gridSize).contains(marker.getPosition())) {
      cluster.push(marker);
    } else {
      const cluster = new Cluster({
        markers: [marker]
      });
      this.clusters.push(cluster);
    }
  }

}
/**
 * Copyright 2021 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Noop algorithm does not generate any clusters or filter markers by the an extended viewport.
 */


class NoopAlgorithm extends AbstractAlgorithm {
  constructor(_a) {
    var options = __rest(_a, []);

    super(options);
  }

  calculate({
    markers,
    map,
    mapCanvasProjection
  }) {
    return {
      clusters: this.cluster({
        markers,
        map,
        mapCanvasProjection
      }),
      changed: false
    };
  }

  cluster(input) {
    return this.noop(input);
  }

}
/**
 * Copyright 2021 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * A very fast JavaScript algorithm for geospatial point clustering using KD trees.
 *
 * @see https://www.npmjs.com/package/supercluster for more information on options.
 */


class SuperClusterAlgorithm extends AbstractAlgorithm {
  constructor(_a) {
    var {
      maxZoom,
      radius = 60
    } = _a,
        options = __rest(_a, ["maxZoom", "radius"]);

    super({
      maxZoom
    });
    this.superCluster = new supercluster__WEBPACK_IMPORTED_MODULE_1__["default"](Object.assign({
      maxZoom: this.maxZoom,
      radius
    }, options));
    this.state = {
      zoom: null
    };
  }

  calculate(input) {
    let changed = false;

    if (!fast_deep_equal__WEBPACK_IMPORTED_MODULE_0___default()(input.markers, this.markers)) {
      changed = true; // TODO use proxy to avoid copy?

      this.markers = [...input.markers];
      const points = this.markers.map(marker => {
        return {
          type: "Feature",
          geometry: {
            type: "Point",
            coordinates: [marker.getPosition().lng(), marker.getPosition().lat()]
          },
          properties: {
            marker
          }
        };
      });
      this.superCluster.load(points);
    }

    const state = {
      zoom: input.map.getZoom()
    };

    if (!changed) {
      if (this.state.zoom > this.maxZoom && state.zoom > this.maxZoom) ;else {
        changed = changed || !fast_deep_equal__WEBPACK_IMPORTED_MODULE_0___default()(this.state, state);
      }
    }

    this.state = state;

    if (changed) {
      this.clusters = this.cluster(input);
    }

    return {
      clusters: this.clusters,
      changed
    };
  }

  cluster({
    map
  }) {
    return this.superCluster.getClusters([-180, -90, 180, 90], Math.round(map.getZoom())).map(this.transformCluster.bind(this));
  }

  transformCluster({
    geometry: {
      coordinates: [lng, lat]
    },
    properties
  }) {
    if (properties.cluster) {
      return new Cluster({
        markers: this.superCluster.getLeaves(properties.cluster_id, Infinity).map(leaf => leaf.properties.marker),
        position: new google.maps.LatLng({
          lat,
          lng
        })
      });
    } else {
      const marker = properties.marker;
      return new Cluster({
        markers: [marker],
        position: marker.getPosition()
      });
    }
  }

}
/**
 * Copyright 2021 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Provides statistics on all clusters in the current render cycle for use in {@link Renderer.render}.
 */


class ClusterStats {
  constructor(markers, clusters) {
    this.markers = {
      sum: markers.length
    };
    const clusterMarkerCounts = clusters.map(a => a.count);
    const clusterMarkerSum = clusterMarkerCounts.reduce((a, b) => a + b, 0);
    this.clusters = {
      count: clusters.length,
      markers: {
        mean: clusterMarkerSum / clusters.length,
        sum: clusterMarkerSum,
        min: Math.min(...clusterMarkerCounts),
        max: Math.max(...clusterMarkerCounts)
      }
    };
  }

}

class DefaultRenderer {
  /**
   * The default render function for the library used by {@link MarkerClusterer}.
   *
   * Currently set to use the following:
   *
   * ```typescript
   * // change color if this cluster has more markers than the mean cluster
   * const color =
   *   count > Math.max(10, stats.clusters.markers.mean)
   *     ? "#ff0000"
   *     : "#0000ff";
   *
   * // create svg url with fill color
   * const svg = window.btoa(`
   * <svg fill="${color}" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 240 240">
   *   <circle cx="120" cy="120" opacity=".6" r="70" />
   *   <circle cx="120" cy="120" opacity=".3" r="90" />
   *   <circle cx="120" cy="120" opacity=".2" r="110" />
   *   <circle cx="120" cy="120" opacity=".1" r="130" />
   * </svg>`);
   *
   * // create marker using svg icon
   * return new google.maps.Marker({
   *   position,
   *   icon: {
   *     url: `data:image/svg+xml;base64,${svg}`,
   *     scaledSize: new google.maps.Size(45, 45),
   *   },
   *   label: {
   *     text: String(count),
   *     color: "rgba(255,255,255,0.9)",
   *     fontSize: "12px",
   *   },
   *   // adjust zIndex to be above other markers
   *   zIndex: 1000 + count,
   * });
   * ```
   */
  render({
    count,
    position
  }, stats) {
    // change color if this cluster has more markers than the mean cluster
    const color = count > Math.max(10, stats.clusters.markers.mean) ? "#ff0000" : "#0000ff"; // create svg url with fill color

    const svg = window.btoa(`
  <svg fill="${color}" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 240 240">
    <circle cx="120" cy="120" opacity=".6" r="70" />
    <circle cx="120" cy="120" opacity=".3" r="90" />
    <circle cx="120" cy="120" opacity=".2" r="110" />
  </svg>`); // create marker using svg icon

    return new google.maps.Marker({
      position,
      icon: {
        url: `data:image/svg+xml;base64,${svg}`,
        scaledSize: new google.maps.Size(45, 45)
      },
      label: {
        text: String(count),
        color: "rgba(255,255,255,0.9)",
        fontSize: "12px"
      },
      title: `Cluster of ${count} markers`,
      // adjust zIndex to be above other markers
      zIndex: Number(google.maps.Marker.MAX_ZINDEX) + count
    });
  }

}
/**
 * Copyright 2019 Google LLC. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Extends an object's prototype by another's.
 *
 * @param type1 The Type to be extended.
 * @param type2 The Type to extend with.
 * @ignore
 */
// eslint-disable-next-line @typescript-eslint/no-explicit-any


function extend(type1, type2) {
  /* istanbul ignore next */
  // eslint-disable-next-line prefer-const
  for (let property in type2.prototype) {
    type1.prototype[property] = type2.prototype[property];
  }
}
/**
 * @ignore
 */


class OverlayViewSafe {
  constructor() {
    // MarkerClusterer implements google.maps.OverlayView interface. We use the
    // extend function to extend MarkerClusterer with google.maps.OverlayView
    // because it might not always be available when the code is defined so we
    // look for it at the last possible moment. If it doesn't exist now then
    // there is no point going ahead :)
    extend(OverlayViewSafe, google.maps.OverlayView);
  }

}
/**
 * Copyright 2021 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


var MarkerClustererEvents;

(function (MarkerClustererEvents) {
  MarkerClustererEvents["CLUSTERING_BEGIN"] = "clusteringbegin";
  MarkerClustererEvents["CLUSTERING_END"] = "clusteringend";
  MarkerClustererEvents["CLUSTER_CLICK"] = "click";
})(MarkerClustererEvents || (MarkerClustererEvents = {}));

const defaultOnClusterClickHandler = (_, cluster, map) => {
  map.fitBounds(cluster.bounds);
};
/**
 * MarkerClusterer creates and manages per-zoom-level clusters for large amounts
 * of markers. See {@link MarkerClustererOptions} for more details.
 *
 */


class MarkerClusterer extends OverlayViewSafe {
  constructor({
    map,
    markers = [],
    algorithm = new SuperClusterAlgorithm({}),
    renderer = new DefaultRenderer(),
    onClusterClick = defaultOnClusterClickHandler
  }) {
    super();
    this.markers = [...markers];
    this.clusters = [];
    this.algorithm = algorithm;
    this.renderer = renderer;
    this.onClusterClick = onClusterClick;

    if (map) {
      this.setMap(map);
    }
  }

  addMarker(marker, noDraw) {
    if (this.markers.includes(marker)) {
      return;
    }

    this.markers.push(marker);

    if (!noDraw) {
      this.render();
    }
  }

  addMarkers(markers, noDraw) {
    markers.forEach(marker => {
      this.addMarker(marker, true);
    });

    if (!noDraw) {
      this.render();
    }
  }

  removeMarker(marker, noDraw) {
    const index = this.markers.indexOf(marker);

    if (index === -1) {
      // Marker is not in our list of markers, so do nothing:
      return false;
    }

    marker.setMap(null);
    this.markers.splice(index, 1); // Remove the marker from the list of managed markers

    if (!noDraw) {
      this.render();
    }

    return true;
  }

  removeMarkers(markers, noDraw) {
    let removed = false;
    markers.forEach(marker => {
      removed = this.removeMarker(marker, true) || removed;
    });

    if (removed && !noDraw) {
      this.render();
    }

    return removed;
  }

  clearMarkers(noDraw) {
    this.markers.length = 0;

    if (!noDraw) {
      this.render();
    }
  }
  /**
   * Recalculates and draws all the marker clusters.
   */


  render() {
    const map = this.getMap();

    if (map instanceof google.maps.Map && this.getProjection()) {
      google.maps.event.trigger(this, MarkerClustererEvents.CLUSTERING_BEGIN, this);
      const {
        clusters,
        changed
      } = this.algorithm.calculate({
        markers: this.markers,
        map,
        mapCanvasProjection: this.getProjection()
      }); // allow algorithms to return flag on whether the clusters/markers have changed

      if (changed || changed == undefined) {
        // reset visibility of markers and clusters
        this.reset(); // store new clusters

        this.clusters = clusters;
        this.renderClusters();
      }

      google.maps.event.trigger(this, MarkerClustererEvents.CLUSTERING_END, this);
    }
  }

  onAdd() {
    this.idleListener = this.getMap().addListener("idle", this.render.bind(this));
    this.render();
  }

  onRemove() {
    google.maps.event.removeListener(this.idleListener);
    this.reset();
  }

  reset() {
    this.markers.forEach(marker => marker.setMap(null));
    this.clusters.forEach(cluster => cluster.delete());
    this.clusters = [];
  }

  renderClusters() {
    // generate stats to pass to renderers
    const stats = new ClusterStats(this.markers, this.clusters);
    const map = this.getMap();
    this.clusters.forEach(cluster => {
      if (cluster.markers.length === 1) {
        cluster.marker = cluster.markers[0];
      } else {
        cluster.marker = this.renderer.render(cluster, stats);

        if (this.onClusterClick) {
          cluster.marker.addListener("click",
          /* istanbul ignore next */
          event => {
            google.maps.event.trigger(this, MarkerClustererEvents.CLUSTER_CLICK, cluster);
            this.onClusterClick(event, cluster, map);
          });
        }
      }

      cluster.marker.setMap(map);
    });
  }

}



/***/ }),

/***/ 8535:
/*!***********************************************!*\
  !*** ./node_modules/fast-deep-equal/index.js ***!
  \***********************************************/
/***/ ((module) => {

 // do not edit .js files directly - edit src/index.jst

module.exports = function equal(a, b) {
  if (a === b) return true;

  if (a && b && typeof a == 'object' && typeof b == 'object') {
    if (a.constructor !== b.constructor) return false;
    var length, i, keys;

    if (Array.isArray(a)) {
      length = a.length;
      if (length != b.length) return false;

      for (i = length; i-- !== 0;) if (!equal(a[i], b[i])) return false;

      return true;
    }

    if (a.constructor === RegExp) return a.source === b.source && a.flags === b.flags;
    if (a.valueOf !== Object.prototype.valueOf) return a.valueOf() === b.valueOf();
    if (a.toString !== Object.prototype.toString) return a.toString() === b.toString();
    keys = Object.keys(a);
    length = keys.length;
    if (length !== Object.keys(b).length) return false;

    for (i = length; i-- !== 0;) if (!Object.prototype.hasOwnProperty.call(b, keys[i])) return false;

    for (i = length; i-- !== 0;) {
      var key = keys[i];
      if (!equal(a[key], b[key])) return false;
    }

    return true;
  } // true if both NaN, false otherwise


  return a !== a && b !== b;
};

/***/ }),

/***/ 1051:
/*!******************************************!*\
  !*** ./node_modules/kdbush/src/index.js ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ KDBush)
/* harmony export */ });
/* harmony import */ var _sort__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./sort */ 7747);
/* harmony import */ var _range__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./range */ 1054);
/* harmony import */ var _within__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./within */ 3540);




const defaultGetX = p => p[0];

const defaultGetY = p => p[1];

class KDBush {
  constructor(points, getX = defaultGetX, getY = defaultGetY, nodeSize = 64, ArrayType = Float64Array) {
    this.nodeSize = nodeSize;
    this.points = points;
    const IndexArrayType = points.length < 65536 ? Uint16Array : Uint32Array;
    const ids = this.ids = new IndexArrayType(points.length);
    const coords = this.coords = new ArrayType(points.length * 2);

    for (let i = 0; i < points.length; i++) {
      ids[i] = i;
      coords[2 * i] = getX(points[i]);
      coords[2 * i + 1] = getY(points[i]);
    }

    (0,_sort__WEBPACK_IMPORTED_MODULE_0__["default"])(ids, coords, nodeSize, 0, ids.length - 1, 0);
  }

  range(minX, minY, maxX, maxY) {
    return (0,_range__WEBPACK_IMPORTED_MODULE_1__["default"])(this.ids, this.coords, minX, minY, maxX, maxY, this.nodeSize);
  }

  within(x, y, r) {
    return (0,_within__WEBPACK_IMPORTED_MODULE_2__["default"])(this.ids, this.coords, x, y, r, this.nodeSize);
  }

}

/***/ }),

/***/ 1054:
/*!******************************************!*\
  !*** ./node_modules/kdbush/src/range.js ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ range)
/* harmony export */ });
function range(ids, coords, minX, minY, maxX, maxY, nodeSize) {
  const stack = [0, ids.length - 1, 0];
  const result = [];
  let x, y;

  while (stack.length) {
    const axis = stack.pop();
    const right = stack.pop();
    const left = stack.pop();

    if (right - left <= nodeSize) {
      for (let i = left; i <= right; i++) {
        x = coords[2 * i];
        y = coords[2 * i + 1];
        if (x >= minX && x <= maxX && y >= minY && y <= maxY) result.push(ids[i]);
      }

      continue;
    }

    const m = Math.floor((left + right) / 2);
    x = coords[2 * m];
    y = coords[2 * m + 1];
    if (x >= minX && x <= maxX && y >= minY && y <= maxY) result.push(ids[m]);
    const nextAxis = (axis + 1) % 2;

    if (axis === 0 ? minX <= x : minY <= y) {
      stack.push(left);
      stack.push(m - 1);
      stack.push(nextAxis);
    }

    if (axis === 0 ? maxX >= x : maxY >= y) {
      stack.push(m + 1);
      stack.push(right);
      stack.push(nextAxis);
    }
  }

  return result;
}

/***/ }),

/***/ 7747:
/*!*****************************************!*\
  !*** ./node_modules/kdbush/src/sort.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ sortKD)
/* harmony export */ });
function sortKD(ids, coords, nodeSize, left, right, depth) {
  if (right - left <= nodeSize) return;
  const m = left + right >> 1;
  select(ids, coords, m, left, right, depth % 2);
  sortKD(ids, coords, nodeSize, left, m - 1, depth + 1);
  sortKD(ids, coords, nodeSize, m + 1, right, depth + 1);
}

function select(ids, coords, k, left, right, inc) {
  while (right > left) {
    if (right - left > 600) {
      const n = right - left + 1;
      const m = k - left + 1;
      const z = Math.log(n);
      const s = 0.5 * Math.exp(2 * z / 3);
      const sd = 0.5 * Math.sqrt(z * s * (n - s) / n) * (m - n / 2 < 0 ? -1 : 1);
      const newLeft = Math.max(left, Math.floor(k - m * s / n + sd));
      const newRight = Math.min(right, Math.floor(k + (n - m) * s / n + sd));
      select(ids, coords, k, newLeft, newRight, inc);
    }

    const t = coords[2 * k + inc];
    let i = left;
    let j = right;
    swapItem(ids, coords, left, k);
    if (coords[2 * right + inc] > t) swapItem(ids, coords, left, right);

    while (i < j) {
      swapItem(ids, coords, i, j);
      i++;
      j--;

      while (coords[2 * i + inc] < t) i++;

      while (coords[2 * j + inc] > t) j--;
    }

    if (coords[2 * left + inc] === t) swapItem(ids, coords, left, j);else {
      j++;
      swapItem(ids, coords, j, right);
    }
    if (j <= k) left = j + 1;
    if (k <= j) right = j - 1;
  }
}

function swapItem(ids, coords, i, j) {
  swap(ids, i, j);
  swap(coords, 2 * i, 2 * j);
  swap(coords, 2 * i + 1, 2 * j + 1);
}

function swap(arr, i, j) {
  const tmp = arr[i];
  arr[i] = arr[j];
  arr[j] = tmp;
}

/***/ }),

/***/ 3540:
/*!*******************************************!*\
  !*** ./node_modules/kdbush/src/within.js ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ within)
/* harmony export */ });
function within(ids, coords, qx, qy, r, nodeSize) {
  const stack = [0, ids.length - 1, 0];
  const result = [];
  const r2 = r * r;

  while (stack.length) {
    const axis = stack.pop();
    const right = stack.pop();
    const left = stack.pop();

    if (right - left <= nodeSize) {
      for (let i = left; i <= right; i++) {
        if (sqDist(coords[2 * i], coords[2 * i + 1], qx, qy) <= r2) result.push(ids[i]);
      }

      continue;
    }

    const m = Math.floor((left + right) / 2);
    const x = coords[2 * m];
    const y = coords[2 * m + 1];
    if (sqDist(x, y, qx, qy) <= r2) result.push(ids[m]);
    const nextAxis = (axis + 1) % 2;

    if (axis === 0 ? qx - r <= x : qy - r <= y) {
      stack.push(left);
      stack.push(m - 1);
      stack.push(nextAxis);
    }

    if (axis === 0 ? qx + r >= x : qy + r >= y) {
      stack.push(m + 1);
      stack.push(right);
      stack.push(nextAxis);
    }
  }

  return result;
}

function sqDist(ax, ay, bx, by) {
  const dx = ax - bx;
  const dy = ay - by;
  return dx * dx + dy * dy;
}

/***/ }),

/***/ 7970:
/*!********************************************!*\
  !*** ./node_modules/supercluster/index.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Supercluster)
/* harmony export */ });
/* harmony import */ var kdbush__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! kdbush */ 1051);

const defaultOptions = {
  minZoom: 0,
  // min zoom to generate clusters on
  maxZoom: 16,
  // max zoom level to cluster the points on
  minPoints: 2,
  // minimum points to form a cluster
  radius: 40,
  // cluster radius in pixels
  extent: 512,
  // tile extent (radius is calculated relative to it)
  nodeSize: 64,
  // size of the KD-tree leaf node, affects performance
  log: false,
  // whether to log timing info
  // whether to generate numeric ids for input features (in vector tiles)
  generateId: false,
  // a reduce function for calculating custom cluster properties
  reduce: null,
  // (accumulated, props) => { accumulated.sum += props.sum; }
  // properties to use for individual points when running the reducer
  map: props => props // props => ({sum: props.my_value})

};

const fround = Math.fround || (tmp => x => {
  tmp[0] = +x;
  return tmp[0];
})(new Float32Array(1));

class Supercluster {
  constructor(options) {
    this.options = extend(Object.create(defaultOptions), options);
    this.trees = new Array(this.options.maxZoom + 1);
  }

  load(points) {
    const {
      log,
      minZoom,
      maxZoom,
      nodeSize
    } = this.options;
    if (log) console.time('total time');
    const timerId = `prepare ${points.length} points`;
    if (log) console.time(timerId);
    this.points = points; // generate a cluster object for each point and index input points into a KD-tree

    let clusters = [];

    for (let i = 0; i < points.length; i++) {
      if (!points[i].geometry) continue;
      clusters.push(createPointCluster(points[i], i));
    }

    this.trees[maxZoom + 1] = new kdbush__WEBPACK_IMPORTED_MODULE_0__["default"](clusters, getX, getY, nodeSize, Float32Array);
    if (log) console.timeEnd(timerId); // cluster points on max zoom, then cluster the results on previous zoom, etc.;
    // results in a cluster hierarchy across zoom levels

    for (let z = maxZoom; z >= minZoom; z--) {
      const now = +Date.now(); // create a new set of clusters for the zoom and index them with a KD-tree

      clusters = this._cluster(clusters, z);
      this.trees[z] = new kdbush__WEBPACK_IMPORTED_MODULE_0__["default"](clusters, getX, getY, nodeSize, Float32Array);
      if (log) console.log('z%d: %d clusters in %dms', z, clusters.length, +Date.now() - now);
    }

    if (log) console.timeEnd('total time');
    return this;
  }

  getClusters(bbox, zoom) {
    let minLng = ((bbox[0] + 180) % 360 + 360) % 360 - 180;
    const minLat = Math.max(-90, Math.min(90, bbox[1]));
    let maxLng = bbox[2] === 180 ? 180 : ((bbox[2] + 180) % 360 + 360) % 360 - 180;
    const maxLat = Math.max(-90, Math.min(90, bbox[3]));

    if (bbox[2] - bbox[0] >= 360) {
      minLng = -180;
      maxLng = 180;
    } else if (minLng > maxLng) {
      const easternHem = this.getClusters([minLng, minLat, 180, maxLat], zoom);
      const westernHem = this.getClusters([-180, minLat, maxLng, maxLat], zoom);
      return easternHem.concat(westernHem);
    }

    const tree = this.trees[this._limitZoom(zoom)];

    const ids = tree.range(lngX(minLng), latY(maxLat), lngX(maxLng), latY(minLat));
    const clusters = [];

    for (const id of ids) {
      const c = tree.points[id];
      clusters.push(c.numPoints ? getClusterJSON(c) : this.points[c.index]);
    }

    return clusters;
  }

  getChildren(clusterId) {
    const originId = this._getOriginId(clusterId);

    const originZoom = this._getOriginZoom(clusterId);

    const errorMsg = 'No cluster with the specified id.';
    const index = this.trees[originZoom];
    if (!index) throw new Error(errorMsg);
    const origin = index.points[originId];
    if (!origin) throw new Error(errorMsg);
    const r = this.options.radius / (this.options.extent * Math.pow(2, originZoom - 1));
    const ids = index.within(origin.x, origin.y, r);
    const children = [];

    for (const id of ids) {
      const c = index.points[id];

      if (c.parentId === clusterId) {
        children.push(c.numPoints ? getClusterJSON(c) : this.points[c.index]);
      }
    }

    if (children.length === 0) throw new Error(errorMsg);
    return children;
  }

  getLeaves(clusterId, limit, offset) {
    limit = limit || 10;
    offset = offset || 0;
    const leaves = [];

    this._appendLeaves(leaves, clusterId, limit, offset, 0);

    return leaves;
  }

  getTile(z, x, y) {
    const tree = this.trees[this._limitZoom(z)];

    const z2 = Math.pow(2, z);
    const {
      extent,
      radius
    } = this.options;
    const p = radius / extent;
    const top = (y - p) / z2;
    const bottom = (y + 1 + p) / z2;
    const tile = {
      features: []
    };

    this._addTileFeatures(tree.range((x - p) / z2, top, (x + 1 + p) / z2, bottom), tree.points, x, y, z2, tile);

    if (x === 0) {
      this._addTileFeatures(tree.range(1 - p / z2, top, 1, bottom), tree.points, z2, y, z2, tile);
    }

    if (x === z2 - 1) {
      this._addTileFeatures(tree.range(0, top, p / z2, bottom), tree.points, -1, y, z2, tile);
    }

    return tile.features.length ? tile : null;
  }

  getClusterExpansionZoom(clusterId) {
    let expansionZoom = this._getOriginZoom(clusterId) - 1;

    while (expansionZoom <= this.options.maxZoom) {
      const children = this.getChildren(clusterId);
      expansionZoom++;
      if (children.length !== 1) break;
      clusterId = children[0].properties.cluster_id;
    }

    return expansionZoom;
  }

  _appendLeaves(result, clusterId, limit, offset, skipped) {
    const children = this.getChildren(clusterId);

    for (const child of children) {
      const props = child.properties;

      if (props && props.cluster) {
        if (skipped + props.point_count <= offset) {
          // skip the whole cluster
          skipped += props.point_count;
        } else {
          // enter the cluster
          skipped = this._appendLeaves(result, props.cluster_id, limit, offset, skipped); // exit the cluster
        }
      } else if (skipped < offset) {
        // skip a single point
        skipped++;
      } else {
        // add a single point
        result.push(child);
      }

      if (result.length === limit) break;
    }

    return skipped;
  }

  _addTileFeatures(ids, points, x, y, z2, tile) {
    for (const i of ids) {
      const c = points[i];
      const isCluster = c.numPoints;
      let tags, px, py;

      if (isCluster) {
        tags = getClusterProperties(c);
        px = c.x;
        py = c.y;
      } else {
        const p = this.points[c.index];
        tags = p.properties;
        px = lngX(p.geometry.coordinates[0]);
        py = latY(p.geometry.coordinates[1]);
      }

      const f = {
        type: 1,
        geometry: [[Math.round(this.options.extent * (px * z2 - x)), Math.round(this.options.extent * (py * z2 - y))]],
        tags
      }; // assign id

      let id;

      if (isCluster) {
        id = c.id;
      } else if (this.options.generateId) {
        // optionally generate id
        id = c.index;
      } else if (this.points[c.index].id) {
        // keep id if already assigned
        id = this.points[c.index].id;
      }

      if (id !== undefined) f.id = id;
      tile.features.push(f);
    }
  }

  _limitZoom(z) {
    return Math.max(this.options.minZoom, Math.min(Math.floor(+z), this.options.maxZoom + 1));
  }

  _cluster(points, zoom) {
    const clusters = [];
    const {
      radius,
      extent,
      reduce,
      minPoints
    } = this.options;
    const r = radius / (extent * Math.pow(2, zoom)); // loop through each point

    for (let i = 0; i < points.length; i++) {
      const p = points[i]; // if we've already visited the point at this zoom level, skip it

      if (p.zoom <= zoom) continue;
      p.zoom = zoom; // find all nearby points

      const tree = this.trees[zoom + 1];
      const neighborIds = tree.within(p.x, p.y, r);
      const numPointsOrigin = p.numPoints || 1;
      let numPoints = numPointsOrigin; // count the number of points in a potential cluster

      for (const neighborId of neighborIds) {
        const b = tree.points[neighborId]; // filter out neighbors that are already processed

        if (b.zoom > zoom) numPoints += b.numPoints || 1;
      } // if there were neighbors to merge, and there are enough points to form a cluster


      if (numPoints > numPointsOrigin && numPoints >= minPoints) {
        let wx = p.x * numPointsOrigin;
        let wy = p.y * numPointsOrigin;
        let clusterProperties = reduce && numPointsOrigin > 1 ? this._map(p, true) : null; // encode both zoom and point index on which the cluster originated -- offset by total length of features

        const id = (i << 5) + (zoom + 1) + this.points.length;

        for (const neighborId of neighborIds) {
          const b = tree.points[neighborId];
          if (b.zoom <= zoom) continue;
          b.zoom = zoom; // save the zoom (so it doesn't get processed twice)

          const numPoints2 = b.numPoints || 1;
          wx += b.x * numPoints2; // accumulate coordinates for calculating weighted center

          wy += b.y * numPoints2;
          b.parentId = id;

          if (reduce) {
            if (!clusterProperties) clusterProperties = this._map(p, true);
            reduce(clusterProperties, this._map(b));
          }
        }

        p.parentId = id;
        clusters.push(createCluster(wx / numPoints, wy / numPoints, id, numPoints, clusterProperties));
      } else {
        // left points as unclustered
        clusters.push(p);

        if (numPoints > 1) {
          for (const neighborId of neighborIds) {
            const b = tree.points[neighborId];
            if (b.zoom <= zoom) continue;
            b.zoom = zoom;
            clusters.push(b);
          }
        }
      }
    }

    return clusters;
  } // get index of the point from which the cluster originated


  _getOriginId(clusterId) {
    return clusterId - this.points.length >> 5;
  } // get zoom of the point from which the cluster originated


  _getOriginZoom(clusterId) {
    return (clusterId - this.points.length) % 32;
  }

  _map(point, clone) {
    if (point.numPoints) {
      return clone ? extend({}, point.properties) : point.properties;
    }

    const original = this.points[point.index].properties;
    const result = this.options.map(original);
    return clone && result === original ? extend({}, result) : result;
  }

}

function createCluster(x, y, id, numPoints, properties) {
  return {
    x: fround(x),
    // weighted cluster center; round for consistency with Float32Array index
    y: fround(y),
    zoom: Infinity,
    // the last zoom the cluster was processed at
    id,
    // encodes index of the first child of the cluster and its zoom level
    parentId: -1,
    // parent cluster id
    numPoints,
    properties
  };
}

function createPointCluster(p, id) {
  const [x, y] = p.geometry.coordinates;
  return {
    x: fround(lngX(x)),
    // projected point coordinates
    y: fround(latY(y)),
    zoom: Infinity,
    // the last zoom the point was processed at
    index: id,
    // index of the source feature in the original input array,
    parentId: -1 // parent cluster id

  };
}

function getClusterJSON(cluster) {
  return {
    type: 'Feature',
    id: cluster.id,
    properties: getClusterProperties(cluster),
    geometry: {
      type: 'Point',
      coordinates: [xLng(cluster.x), yLat(cluster.y)]
    }
  };
}

function getClusterProperties(cluster) {
  const count = cluster.numPoints;
  const abbrev = count >= 10000 ? `${Math.round(count / 1000)}k` : count >= 1000 ? `${Math.round(count / 100) / 10}k` : count;
  return extend(extend({}, cluster.properties), {
    cluster: true,
    cluster_id: cluster.id,
    point_count: count,
    point_count_abbreviated: abbrev
  });
} // longitude/latitude to spherical mercator in [0..1] range


function lngX(lng) {
  return lng / 360 + 0.5;
}

function latY(lat) {
  const sin = Math.sin(lat * Math.PI / 180);
  const y = 0.5 - 0.25 * Math.log((1 + sin) / (1 - sin)) / Math.PI;
  return y < 0 ? 0 : y > 1 ? 1 : y;
} // spherical mercator to longitude/latitude


function xLng(x) {
  return (x - 0.5) * 360;
}

function yLat(y) {
  const y2 = (180 - y * 360) * Math.PI / 180;
  return 360 * Math.atan(Math.exp(y2)) / Math.PI - 90;
}

function extend(dest, src) {
  for (const id in src) dest[id] = src[id];

  return dest;
}

function getX(p) {
  return p.x;
}

function getY(p) {
  return p.y;
}

/***/ })

}]);
//# sourceMappingURL=node_modules_capacitor_google-maps_dist_esm_web_js.js.map